-sum(log(ddist(Y,'std',mu=theta[1],sigma=theta[2],shape=theta[3])))
}
start = c(mean(Y), sd(Y), 3)
ML = optim(start,loglik,'L-BFGS-B',lower=c(-1,0,2),upper=c(1,2,30),hessian=TRUE)
library(rugarch)
loglik = function(theta){
-sum(log(ddist(Y,'std',mu=theta[1],sigma=theta[2],shape=theta[3])))
}
start = c(mean(Y), sd(Y), 3)
ML = optim(start,loglik,'BFGS',hessian=TRUE)
library(rugarch)
loglik = function(theta){
-sum(log(ddist(Y,'std',mu=theta[1],sigma=theta[2],shape=theta[3])))
}
start = c(mean(Y), sd(Y), 3)
ML = optim(start,loglik,hessian=TRUE)
load('data.STOCKS.RData')
names(returns)
Y = as.numeric(returns[,"AAPL"])
library(rugarch)
loglik = function(theta){
-sum(log(ddist(Y,'std',mu=theta[1],sigma=theta[2],shape=theta[3])))
}
start = c(mean(Y), sd(Y), 3)
ML = optim(start,loglik,hessian=TRUE)
library(rugarch)
loglik = function(theta){
-sum(log(ddist(Y,dist='std',mu=theta[1],sigma=theta[2],shape=theta[3])))
}
start = c(mean(Y), sd(Y), 3)
ML = optim(start,loglik,hessian=TRUE)
mle$hessian
ML$hessian
ML$par
library(rugarch)
loglik = function(theta){
-sum(log(ddist(Y,dist='std',mu=theta[1],sigma=theta[2],shape=theta[3])))
}
start = c(mean(Y), sd(Y), 3)
ML = optim(start,loglik,hessian=TRUE)
ML$par
paste('MLE produced mean of',round(ML$par[1],3),'standard deviation',round(ML$par[2],3),'df',round(ML$par[3],3))
AIC = -2*log(ML$value) + 2*3
BIC = -2*log(ML$value) + log(length(Y))*3
AIC = -2*ML$value) + 2*3
AIC = -2*ML$value + 2*3
BIC = -2*ML$value + log(length(Y))*3
ML2 = optim(start, loglik, method='BFGS')
?qnorm
pnorm(0.25, 0,1)
pnorm(-1.96,0,1)
pnorm(7.5,9.6,13.1)
pnorm(7.5,9.3,12.8)
seq(0,1,length=10)
seq(0,1,length=11)
# allocation to the stock market
r_stock = fucntion(x) (0.5*(1+0.3)+0.5*(1-0.25))*x
# allocation to the stock market
r_stock = function(x) (0.5*(1+0.3)+0.5*(1-0.25))*x
N = 101
U = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
#allocation to stock: x
#allocation to bank: 1-x
#wealth W
U[i] = sqrt(r_stock(x[i]))
}
plot(x,U)
# allocation to the stock market
r_stock = function(x) (0.5*(1+0.3)+0.5*(1-0.25))*x
N = 101
U = rep(0,N)
W = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
#allocation to stock: x
#allocation to bank: 1-x
#wealth W
W[i] = r_stock(x[i])
U[i] = sqrt(W[i])
}
plot(W,U)
W
# allocation to the stock market
r_stock = function(x) (0.5*(1+0.3)+0.5*(1-0.25))*x
N = 101
U = rep(0,N)
W = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
#allocation to stock: x
#allocation to bank: 1-x
#wealth W
W[i] = r_stock(x[i])+1-x[i]
U[i] = sqrt(W[i])
}
plot(W,U)
# allocation to the stock market
r_stock = function(x) (0.5*(1+0.3)+0.5*(1-0.25))*x
N = 101
U = rep(0,N)
W = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
#allocation to stock: x
#allocation to bank: 1-x
#wealth W
W[i] = r_stock(x[i])
U[i] = sqrt(W[i])
}
plot(W,U)
# allocation to the stock market
r_stock = function(x) (0.5*(1+0.3)+0.5*(1-0.25))*x
N = 101
U = rep(0,N)
W = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
#allocation to stock: x
#allocation to bank: 1-x
#wealth W
W[i] = r_stock(x[i]) + 1-x[i]
U[i] = sqrt(W[i])
}
plot(W,U)
# allocation to the stock market
r_stock = function(x) (0.5*(1+0.3)+0.5*(1-0.25))*x
N = 101
U = rep(0,N)
W = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
#allocation to stock: x
#allocation to bank: 1-x
#wealth W
W[i] = r_stock(x[i]) + 1-x[i]
U[i] = sqrt(W[i])
}
plot(x,U)
# allocation to the stock market
U_stock = function(x) 0.5*sqrt(x*1.3)+0.5*sqrt(x*(1-0.25))
N = 101
U = rep(0,N)
W = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
#allocation to stock: x
#allocation to bank: 1-x
U[i] = 0.5*U_stock(x[i]*10^5) + 0.5*sqrt((1-x[i])*10^5)
}
plot(x,U)
# allocation to the stock market
U_stock = function(x) 0.5*sqrt(x*10^5*1.3)+0.5*sqrt(x*10^5*(1-0.25))
U_bank = function(x) sqrt(x*10^5)
N = 101
U = rep(0,N)
W = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
#allocation to stock: x
#allocation to bank: 1-x
U[i] = 0.5*U_stock(x[i]) + 0.5*U_bank(1-x[i])
}
plot(x,U)
# allocation to the stock market
U_stock = function(x) 0.5*sqrt(x*10^5*1.3)+0.5*sqrt(x*10^5*(1-0.25))
U_bank = function(x) sqrt(x*10^5)
N = 101
U = rep(0,N)
W = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
#allocation to stock: x
#allocation to bank: 1-x
U[i] = x[i]*U_stock(x[i]) + (1-x[i])*U_bank(1-x[i])
}
plot(x,U)
# allocation to the stock market
Utility = function(x){
#allocation to stock: x
sqrt((1+0.3*x)*10^5)*0.5 + sqrt((1-0.25*x)*10^5)*0.5
}
N = 101
U = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
U[i] = Utility(x[i])
}
plot(x,U)
?optim
?uniroot
?which
# allocation to the stock market
Utility = function(x){
#allocation to stock: x
sqrt((1+0.3*x)*10^5)*0.5 + sqrt((1-0.25*x)*10^5)*0.5
}
N = 101
U = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
U[i] = Utility(x[i])
}
plot(x,U)
x[which(U==max(U))]
# allocation to the stock market
Utility = function(x){
#allocation to stock: x
sqrt((1+0.3*x)*10^5)*0.5 + sqrt((1-0.25*x)*10^5)*0.5
}
N = 101
U = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
U[i] = Utility(x[i])
}
plot(x,U)
w_stock = x[which(U==max(U))]
w_bank = 1-w_stock
paste('maximum utility occurs with stock weight of',w_stock, 'and risk free weight of',w_bank)
value = function(x){
#allocation to stock: x
sqrt((0.3*x)*10^5)*0.5 - 2*sqrt((-0.25*x)*10^5)*0.5
}
N = 101
U = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
U[i] = Utility(x[i])
}
plot(x,U)
w_stock = x[which(U==max(U))]
w_bank = 1-w_stock
paste('maximum utility occurs with stock weight of',w_stock, 'and risk free weight of',w_bank)
value = function(x){
#allocation to stock: x
sqrt((0.3*x)*10^5)*0.5 - 2*sqrt((-0.25*x)*10^5)*0.5
}
N = 101
U = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
U[i] = value(x[i])
}
plot(x,U)
w_stock = x[which(U==max(U))]
w_bank = 1-w_stock
paste('maximum utility occurs with stock weight of',w_stock, 'and risk free weight of',w_bank)
value = function(x){
#allocation to stock: x
sqrt((0.3*x)*10^5)*0.5 - 2*sqrt((0.25*x)*10^5)*0.5
}
N = 101
U = rep(0,N)
x = seq(0,1,length=N)
for (i in 1:N){
U[i] = value(x[i])
}
plot(x,U)
w_stock = x[which(U==max(U))]
w_bank = 1-w_stock
paste('maximum utility occurs with stock weight of',w_stock, 'and risk free weight of',w_bank)
x_log = seq(0,20,by=0.02)
par(mfrow(2,1))
x_log = seq(0,20,by=0.02)
par(mfrow=c(2,1))
plot(x_log, dlnorm(x_log,meanlog=1,sdlog=0.5),type='l',col='red', main='log-normal family', ylab = 'density')
lines(x_log, dlnorm(x_log,meanlog=2,sdlog=0.5),type='l',col='blue')
x_log = seq(0,20,by=0.02)
par(mfrow=c(2,1))
plot(x_log, dlnorm(x_log,meanlog=1,sdlog=0.5),type='l',col='red', main='log-normal family', ylab = 'density')
lines(x_log, dlnorm(x_log,meanlog=2,sdlog=0.5),type='l',col='blue')
plot(x_log, plnorm(x_log,meanlog=1,sdlog=0.5),type='l',col='red', main='log-normal family', ylab = 'CDF')
lines(x_log, plnorm(x_log,meanlog=2,sdlog=0.5),type='l',col='blue')
x_log = seq(0,20,by=0.02)
par(mfrow=c(2,2))
plot(x_log, dlnorm(x_log,meanlog=1,sdlog=0.5),type='l',col='red', main='log-normal family', ylab = 'density')
lines(x_log, dlnorm(x_log,meanlog=2,sdlog=0.5),type='l',col='blue')
plot(x_log, plnorm(x_log,meanlog=1,sdlog=0.5),type='l',col='red', main='log-normal family', ylab = 'CDF')
lines(x_log, plnorm(x_log,meanlog=2,sdlog=0.5),type='l',col='blue')
x_log = seq(0,20,by=0.02)
par(mfrow=c(1,2))
plot(x_log, dlnorm(x_log,meanlog=1,sdlog=0.5),type='l',col='red', main='log-normal family', ylab = 'density')
lines(x_log, dlnorm(x_log,meanlog=2,sdlog=0.5),type='l',col='blue')
plot(x_log, plnorm(x_log,meanlog=1,sdlog=0.5),type='l',col='red', main='log-normal family', ylab = 'CDF')
lines(x_log, plnorm(x_log,meanlog=2,sdlog=0.5),type='l',col='blue')
?sd
?rt
norm.cop10 = normalCopula(dim=10, param=0.95, dispstr='ex')
library(Copula)
library(copula)
norm.cop10 = normalCopula(dim=10, param=0.95, dispstr='ex')
samp = rCopula(10^6, norm.cop10)
minSample = apply(samp, 1, min)
minT = qexp(minSample, rate=0.1)
N.default = sum(minT<=1)
p = N.default/length(minT)
res = sum(dbinom(7:10, 10, p))
paste('The probability that at least 7 loans default out of 10 is', signif(res,3))
?tCopula
t.cop10 = tCopula(dim=10, param=0.95, dispstr='ex')
t.samp = rCopula(10^6, t.cop10)
minSample = apply(samp, 1, min) #prob of 1st loan defaults
minT = qexp(minSample, rate=0.1) #time it takes to default
N.default = sum(minT<=1)
p = N.default/length(minT)
res = sum(dbinom(7:10, 10, p))
paste('The probability that at least 7 loans default out of 10 is', signif(res,3))
paste('The probability that at least 7 loans default out of 10 is', signif(pnorm,3))
library(copula)
h = 0.1
T = 1
rho = 0.95
n = 10
n.iter = 10^3
norm.cop = normalCopula(dim=n, param=rho, dispstr='ex')
u = rCopula(n.iter, norm.cop)
t = (u < pexp(T, rate=h))
nDefault = apply(t,1,sum)
propDist = table(nDefault)/n.iter
pnorm = mean(nDefault>=7)
paste('The probability that at least 7 loans default out of 10 is', signif(pnorm,3))
View(t)
?table
propDist
nDefault>=7
nDefault
tCopula?
?tCopula
nu = 1
t.cop = tCopula(dim=n, param=rho, dispstr='ex', df=nu)
t.u = rCopula(n.iter, t.cop)
t.t = (t.u < pexp(T, rate=h))
t.nDefault = apply(t.t,1,sum)
t.p = mean(t.nDefault>=7) #portfolio with # of defaults >= 7
paste('The probability that at least 7 loans default out of 10 is', signif(t.p,3))
lower = pnorm - qnorm(0.995)*sd(nDefault)
nlower = pnorm - qnorm(0.995)*sd(nDefault)
nlower
pnorm - qnorm(0.995)*sqrt(pnorm*(1-pnorm)/n.iter)
nlower = pnorm - qnorm(0.995)*sd(nDefault)/n.iter
nlower
nlower = pnorm - qnorm(0.995)*sd(propDist)/n.iter
nlower = pnorm - qnorm(0.995)*sqrt(pnorm*(1-pnorm)/n.iter)
nupper = pnorm + qnorm(0.995)*sqrt(pnorm*(1-pnomr)/n.iter)
nlower = pnorm - qnorm(0.995)*sqrt(pnorm*(1-pnorm)/n.iter)
nupper = pnorm + qnorm(0.995)*sqrt(pnorm*(1-pnorm)/n.iter)
paste('The 99% CI for p estimated by Gaussain Copula is from', signif(nlower,3), 'to', signif(nupper,3))
tlower = t.p - qnorm(0.995)*sqrt(t.p*(1-t.p)/n.iter)
tupper = t.p + qnorm(0.995)*sqrt(t.p*(1-t.p)/n.iter)
paste('The 99% CI for p estimated by Gaussain Copula is from', signif(tlower,3), 'to', signif(tupper,3))
nlower = pnorm - qnorm(0.995)*sqrt(pnorm*(1-pnorm)/n.iter)
nupper = pnorm + qnorm(0.995)*sqrt(pnorm*(1-pnorm)/n.iter)
paste('The 99% CI for p estimated by Gaussain Copula is from', signif(nlower,3), 'to', signif(nupper,3))
tlower = t.p - qnorm(0.995)*sqrt(t.p*(1-t.p)/n.iter)
tupper = t.p + qnorm(0.995)*sqrt(t.p*(1-t.p)/n.iter)
paste('The 99% CI for p estimated by t-Copula is from', signif(tlower,3), 'to', signif(tupper,3))
library(copula)
h = 0.1
T = 1
rho = 0.95
n = 10
n.iter = 10^6
norm.cop = normalCopula(dim=n, param=rho, dispstr='ex')
u = rCopula(n.iter, norm.cop)
t = (u < pexp(T, rate=h))
nDefault = apply(t,1,sum)
propDist = table(nDefault)/n.iter
pnorm = mean(nDefault>=7) #portfolio with # of defaults >= 7
paste('The probability that at least 7 loans default out of 10 is', signif(pnorm,3))
nu = 1
t.cop = tCopula(dim=n, param=rho, dispstr='ex', df=nu)
t.u = rCopula(n.iter, t.cop)
t.t = (t.u < pexp(T, rate=h))
t.nDefault = apply(t.t,1,sum)
t.p = mean(t.nDefault>=7) #portfolio with # of defaults >= 7
paste('The probability that at least 7 loans default out of 10 is', signif(t.p,3))
nlower = pnorm - qnorm(0.995)*sqrt(pnorm*(1-pnorm)/n.iter)
nupper = pnorm + qnorm(0.995)*sqrt(pnorm*(1-pnorm)/n.iter)
paste('The 99% CI for p estimated by Gaussain Copula is from', signif(nlower,3), 'to', signif(nupper,3))
tlower = t.p - qnorm(0.995)*sqrt(t.p*(1-t.p)/n.iter)
tupper = t.p + qnorm(0.995)*sqrt(t.p*(1-t.p)/n.iter)
paste('The 99% CI for p estimated by t-Copula is from', signif(tlower,3), 'to', signif(tupper,3))
library(AER)
install.packages('AER')
install.packages("AER")
install.packages("AER")
names(macro)
library(AER)
library(AER)
data('USMacroG')
Macro = as.data.frame(USMacroG)
names(Macro)
unemp = Macro$unemp
invest = Macro$invest
government = Macro$government
cpi = Macro$cpi
consumption = Macro$consumption
par(mfrow=c(1,2))
plot(cpi)
acf(cpi,40)
View(Macro)
View(Macro)
adf.test(cpi)
library(tseries)
adf.test(cpi)
difY = diff(cpi)
plot(difY, type='l', ylab='changes in cpi level')
library(forecast)
?auto.arima
?arima
fitAuto = auto.arima(difY, seasonal=FALSE)
fitAuto = autoarima(difY, seasonal=FALSE, ic='aic')
fitAuto = arima(difY, seasonal=FALSE, ic='aic')
library(forecast)
install.packages('forecast')
?auto.arima
library(forecast)
library(quantmod)
?getSymbols
getSymbols(Symbols=code, src='FRED')
ibrary(quantmod)
library(quantmod)
FX_list = c('DEXCHUS')
for (code in FX_list){
getSymbols(Symbols=code, src='FRED')
}
View(DEXCHUS)
library(quantmod)
#list of FX rates
FX_list = c('DEXCHUS')
#past 5 years data
for (code in FX_list){
getSymbols(Symbols=code, src='FRED',
from=as.Date("2018/05/01"), to=Sys.Date())
}
getSymbols(Symbols=code, src='FRED',
from=as.Date("2018-05-01"), to=Sys.Date())
View(DEXCHUS)
getSymbols(Symbols=code, src='FRED',
from="2018-05-01", to=Sys.Date())
Sys.Date()
getSymbols(Symbols=code, src='FRED', from="2018-05-01", to=Sys.Date())
#past 5 years data
for (code in FX_list){
getSymbols(Symbols=code, from="2018-05-01", to=Sys.Date(), src='FRED')
}
#list of FX rates
FX_list = c('DEXCHUS',"DEXJPUS")
for (code in FX_list){
getSymbols(Symbols=code, src='FRED')
}
data <- getSymbols(Symbols=code, src='FRED')
for (code in FX_list){
data <- getSymbols(Symbols=code, src='FRED')
}
#list of FX rates
FX_list = c('DEXCHUS',"DEXJPUS")
for (code in FX_list){
data <- getSymbols(Symbols=code, src='FRED')
}
?deparse
?substitute
DEXCHUS
?paste0
?write.csv
setwd("C:/Users/janeg/cornell_projects/Opt_proj")
library(quantmod)
#list of FX rates
FX_list = c('DEXCHUS',"DEXJPUS")
for (code in FX_list){
data <- getSymbols(Symbols=code, src='FRED', auto.assign = FALSE)
write.csv(data, file=paste0(code,'.csv'))
}
library(quantmod)
#list of FX rates
FX_list = c('DEXCHUS',"DEXJPUS")
for (code in FX_list){
data <- getSymbols(Symbols=code, src='FRED', auto.assign = FALSE)
write.csv(data, file=paste0(code,'.csv'), row.names=FALSE)
}
View(data)
library(quantmod)
#list of FX rates
FX_list = c('DEXCHUS',"DEXJPUS")
for (code in FX_list){
data <- getSymbols(Symbols=code, src='FRED', auto.assign = FALSE)
write.csv(data, file=paste0(code,'.csv'), row.names=TRUE)
}
library(quantmod)
#list of FX rates
FX_list = c('DEXCHUS',"DEXJPUS")
for (code in FX_list){
data <- getSymbols(Symbols=code, src='FRED', auto.assign = FALSE)
write.zoo(data, file=paste0(code,'.csv'), index.name='DateTime', col.names=T)
}
library(quantmod)
#list of FX rates
FX_list = c('DEXCHUS',"DEXJPUS")
for (code in FX_list){
data <- getSymbols(Symbols=code, src='FRED', auto.assign = FALSE)
write.zoo(data, file=paste0(code,'.csv'), index.name='DateTime', sep=',', col.names=T)
}
write.zoo(data, file=paste0(code,'.csv'), index.name='DATETIME', sep=',', col.names=T)
library(quantmod)
#list of FX rates
FX_list = c('DEXCHUS',"DEXJPUS")
for (code in FX_list){
data <- getSymbols(Symbols=code, src='FRED', auto.assign = FALSE)
write.zoo(data, file=paste0(code,'.csv'), index.name='DATETIME', sep=',', col.names=T)
}
